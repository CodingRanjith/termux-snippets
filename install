#!/usr/bin/env bash
## Author: Hakxcore https://github.com/hakxcore
## Colors
currentVersion="2.1.2"
RED="$(printf '\033[31m')", GREEN="$(printf '\033[32m')", ORANGE="$(printf '\033[33m')", BLUE="$(printf '\033[34m')",
MAGENTA="$(printf '\033[35m')", CYAN="$(printf '\033[36m')", WHITE="$(printf '\033[37m')", BLACK="$(printf '\033[30m')", 
REDBG="$(printf '\033[41m')", GREENBG="$(printf '\033[42m')", ORANGEBG="$(printf '\033[43m')", BLUEBG="$(printf '\033[44m')", 
MAGENTABG="$(printf '\033[45m')", CYANBG="$(printf '\033[46m')", WHITEBG="$(printf '\033[47m')", BLACKBG="$(printf '\033[40m')",
RESETBG="$(printf '\e[0m')", BLINK="$(printf '\033[5;31m')"

declare -a tools=(cheat cipher covidinfo crypt cryptocurrency geo gif googler ipinfo jukebox lyrics meme movie news pwned qrify shodan shorturl termux-snippets todo transfer weather)
prefix="/data/data/com.termux/files"

checkDialog()
{
	if  command -v dialog &>/dev/null; then
		echo ""
	else
		echo $BLUE"\tdialog should be installed"$RESETBG
		echo $BLUE"\tuse $RED'apt install dialog'$BLUE firstly"$RESETBG
	fi 
}

installRequirements()
{
	sudo apt install jp2a lolcat curl 
}

installationEnd()
{
	echo -n "( •_•)"
	sleep .75
	echo -n -e "\r( •_•)>$BLUE⌐■-■$RESETBG"
	sleep .75
	echo -n -e "\r               "
	echo  -e "\r($BLUE⌐■_■$RESETBG)"
	sleep .5
	echo "Termux Snippets version $BLUE$currentVersion$RESETBG"
	echo  "$GREEN""https://github.com/hakxcore/Termux-snippets$RESETBG"
}

askInstall()
{
		checkDialog
		DIALOG_CANCEL=1
		DIALOG_ESC=255
		HEIGHT=0
		WIDTH=0

	display_result() {
	  dialog --title "$1" \
	    --no-collapse \
	    --msgbox "$result" 0 0
	}

	while true; do
		exec 3>&1
		selection=$(dialog \
		--backtitle "From @hakxcore(https://github.com/hakxcore)" \
	    --title "termux-snippets" \
	    --clear \
	    --cancel-label "Exit" \
	    --menu "Choose OS:" 15 40 5 \
	    	"1" "Termux" \
			"2" "Debian"
	    2>&1 1>&3)
	  	exit_status=$?
	  	exec 3>&-
	  	##handle termination error 
	  	case $exit_status in
		  	$DIALOG_CANCEL)
		  		clear
		      	echo "installation terminated."
		      	exit
		      	;;
		    $DIALOG_ESC)
		      	clear
		      	echo "installation aborted." >&2
		      	exit 1
		      	;;
	  	esac
	  
	  ##Operating system Selection 
	  case $selection in
	    0 )
	      clear
	      echo "installation terminated."
	      ;;
	    1 )
			termux=$(dialog \
			    --backtitle "From @hakxcore(https://github.com/hakxcore)" \
			    --title "termux-snippets" \
			    --clear \
			    --cancel-label "Exit" \
			    --menu "Choose OS:" 15 40 5 \
			    	"1" "Install All" \
					"2" "Install One by One"
			    2>&1 1>&3)
			    exit_statuss=$?
			    ##Main programme termination error handle
			    case $exit_statuss in
				    $DIALOG_CANCEL)
				      clear
				      echo "Installation terminated."
				      exit
				      ;;
				    $DIALOG_ESC)
				      clear
				      echo "Installation aborted." >&2
				      exit 1
				      ;;
			  	esac

			  	##Installation on termux
			  	case $termux in
				    ##programme termination error handel
				    0 )
				    	clear
				    	echo "installation terminated."
				    ;;
				    
				    ##Install all snippets at once
				    1 )
						installAll
					;;

					##Install all snippets one by one
					2 )
						installOneByOne
					;;
				esac

	      ;;
	    2 )
			##Debian OS
	      ;;
	  esac
	done
}

installOneByOne()
{
	read -p "$BLUE>$RESETBG Do you wish to install $BLUE$1$RESETBG [Y/n]: " answer
						  answer=${answer:-Y}

						  if [[ "$answer" == [Yy] ]]; then
							  if [[ $1 == "weather" ]]; then
								  cd $1 || return 1
								  echo -n "Installing $BLUE$1$RESETBG: "
								  chmod a+x $1
								  cp $1 $prefix/usr/bin > /dev/null 2>&1;
								  echo ""$GREEN"Success$RESETBG"
								  cd ..; installationEnd ; exit 1 || return
							  elif [[ $1 == "termux-snippets" ]]; then
						     		echo -n "Installing $BLUE$1$RESETBG: "
						      		chmod a+x $1
						      		cp $1 $prefix/usr/bin > /dev/null 2>&1;
						      		echo ""$GREEN"Success$RESETBG"
							  else 
								  cd $1 || return 1
								  echo -n "Installing $BLUE$1$RESETBG: "
								  chmod a+x $1
								  cp $1 $prefix/usr/bin > /dev/null 2>&1;
								  echo ""$GREEN"Success$RESETBG"
								  cd .. || return 1
							  fi
						  fi
}


updateTool()
{
  if [[ -f  $prefix/usr/bin/$1 ]]; then
    cd $1 || return 1
    git pull origin
    echo -n "Installing $BLUE$1$RESETBG: "
    chmod a+x $1
    cp $1 $prefix/usr/bin > /dev/null 2>&1 || { echo "Failure"; echo "Error copying file, try running install script again"; exit 1; }
    echo ""$GREEN"Success$RESETBG"
    cd ..; installationEnd || return 1
  fi
}


singleInstall()
{
  cd $1 || exit 1
  echo -n "Installing $BLUE$1$RESETBG: "
  chmod a+x $1
  cp $1 $prefix/usr/bin > /dev/null 2>&1 || { echo "Failure"; echo "Error copying file, try running install script again"; exit 1; }
  echo ""$GREEN"Success$RESETBG"
  cd ..; installationEnd || exit 1
}

##Driver
  if [[ $2 == "all" ]];then
    for tool in "${tools[@]}"; do
      singleInstall $tool || exit 1
    done
  else
    for tool in "${@:2}"; do
      singleInstall $tool || exit 1
    done
  fi
  
if [[ $# == 0 ]]; then
  for tool in "${tools[@]}"; do
    askInstall $tool || exit 1
  done
elif [[ $1 == "update" ]]; then
  echo "Updating scripts..."
  for tool in "${tools[@]}"; do
    updateTool $tool || exit 1
  done
  fi

  if [[ $1 == "all" ]]; then
  for tool in "${tools[@]}"; do
    singleInstall $tool || exit 1
  done
else
  singleInstall $1 || exit 1
fi